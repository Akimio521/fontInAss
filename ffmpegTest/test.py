from pathlib import Path
import shlex
import sys
from urllib.parse import urljoin
import json
import os
import shutil
import subprocess
import threading
import time
from queue import Queue

from io import BytesIO
import os
from fontTools.ttLib import TTCollection, TTFont
from fontTools.misc.encodingTools import getEncoding

def executeCommand(command_with_args, content):
    try:
        proc = subprocess.Popen(
            shlex.split(command_with_args),
            stdout=subprocess.DEVNULL,
            stderr=subprocess.PIPE,
            universal_newlines=True,
        )
        with open(r"/mnt/storage/Projects/fontInAss/asspipe", "wb") as f:
            print
            f.write(content)
        _, stderr = proc.communicate()
        return {
            "code": proc.returncode,
            "out": None,
            "error": stderr,
        }
    except Exception as generic_e:
        return {
            "code": -30,
            "out": "",
            "error": generic_e,
        }


def getAllFiles(path):
    Filelist = []
    for home, _, files in os.walk(path):
        for filename in files:
            if Path(filename).suffix.lower()[1:] in ["ttc", "ttf", "otf"]:
                # 保证所有系统下\\转变成/
                Filelist.append(Path(home, filename).as_posix())
    return Filelist




def gen_font_info(file_path):
    with open(file_path, "rb") as f:
        data = f.read()
    sfntVersion = data[:4]
    # print('sfntVersion == b"ttcf" ? ', sfntVersion == b"ttcf")
    fonts = TTCollection(BytesIO(data)).fonts if sfntVersion == b"ttcf" else [TTFont(BytesIO(data))]
    file_size = os.path.getsize(file_path)
    file_mtime = int(os.path.getmtime(file_path))
    font_count = len(fonts)
    # 直接构造 font_info_list 和 font_detail_list
    font_info_list = [{"file_path": file_path, "file_size": file_size, "file_mtime": file_mtime, "font_count": font_count}]
    font_detail_list = []
    for index, font in enumerate(fonts):
        # print("\nfontIndex = ",index)
        family = []
        for record in font["name"].names:
            if record.nameID in [1, 4, 6]:  # Family ，  Full Name ， PostScript Name
                fontName = str(record).strip()
                # print(f"fonts[{index}] RECID = {record.nameID} t:{fontName}" )
                font_detail_list.append((index, record.nameID, fontName))
    return font_detail_list


def makeAss(fontname):
    txt = (
        """[Script Info]
; Script generated by Aegisub 3.3.3
; http://www.aegisub.org/
Title: [Nekomoe kissaten] Isekai wa Smartphone to Tomo ni. [05][BDRip 1080p HEVC-10bit FLAC_AAC].SC
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: lv1
Audio File: E:/1/[Beatrice-Raws] Isekai wa Smartphone to Tomo ni [BDRip 1920x1080 x264 FLAC]/[Beatrice-Raws] Isekai wa Smartphone to Tomo ni 05 [BDRip 1920x1080 x264 FLAC].mkv
Video File: E:/1/[Beatrice-Raws] Isekai wa Smartphone to Tomo ni [BDRip 1920x1080 x264 FLAC]/[Beatrice-Raws] Isekai wa Smartphone to Tomo ni 05 [BDRip 1920x1080 x264 FLAC].mkv
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.250000
Scroll Position: 1626
Active Line: 1675
Video Position: 4193

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,"""
        + fontname
        + """,120,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,3,2,15,15,15,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 3,0:00:00.00,0:59:00.00,Default,,0,0,0,fx,我能吞下玻璃而不伤身体 
"""
    )
    return txt.encode("UTF-8-sig")


if __name__ == "__main__":
    for file in getAllFiles(r"/mnt/storage/Fonts/超级字体整合包 XZ"):
        print(file)
        try:
            font_detail_list = gen_font_info(file)
            for index, nameID, fontName in font_detail_list:
                content = makeAss(fontName)
                # print(res,index, nameID, fontName)
                res = executeCommand(
                    'ffmpeg -f lavfi -i color=#000000@0:s=1920x1080 -vf "subtitles=/mnt/storage/Projects/fontInAss/asspipe" -ss 3 -vframes 1 -vsync 0 -f image2pipe -vframes 1 -', content
                )
                print(res["error"])
        except Exception as e:
            print(e)
        break

    # # mkfifo管道
    # # 先写ass再运行ffmpeg

    # # # res = executeCommand('cat' , f.read())
    # print(res["error"])
